The flow for me, seems like it's going to be 

read
--
string -> sexp

Read a string representing the program/module 

datum->syntax
--
sexp, env -> syntax

Load base environment and module environment, 

syntax-expand
--
syntax, env -> primitive-syntax

For each form (syntax-expander ...), apply the syntax-expander
recursively until the form doesn't contain any applications where the
head is a syntax-expander.

Part of this is contextualizing the core-hubrisp operators to compile in
either return, expression or statement context. As (not really) described
in `context.mkd`.

emit-js
--
primitive-syntax -> js-string

At this point the tree should contain only Hubrisp.Primitives and
Javascript values all of which should transform to strings
representing javascript with the minimum of fuss.
